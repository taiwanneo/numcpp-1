/* [[[cog

# :mode=python:

import cog
import cog_warning

cog_warning.warn(cog, __COGFILE__, prefix = '//')
]]] */
// [[[end]]]

#ifndef _NUMCPP_ARRAY_HPP_
    #error "only <numcpp/array.hpp> can include this file!"
#endif


//-----------------------------------------------------------------------------
// unary operators
//
//     /*operator+*/
//     operator-
//     operator~
//     operator!

/* [[[cog

import cog

template = '''
template <class R>
array<{return_type}>
array<R>::
operator{op}() const
{{
    DOUT << __PRETTY_FUNCTION__ << std::endl;

    array<R> out;

    out._size = _size;
    out._array = std::make_shared<std::vector<R>>();
    out._array->reserve(_size);
    out._shape = _shape;

    if(ndim() == 1)
    {{
        #define loop( idx )                                                 \\
            for(std::size_t i = 0; i < _size; ++i)                          \\
            {{                                                               \\
                out._array->emplace_back({op}(*_array)[_offset + idx ]);       \\
            }}

        if(_strides.empty()) loop( i )
        else                 loop( i * _strides[0] )

        #undef loop

        return out;
    }}
    else
    if(ndim() == 2)
    {{
        out.reshape(_shape);

        #define loop( idx )                                                 \\
        {{                                                                   \\
            for(std::size_t m = 0; m < _shape[0]; ++m)                      \\
            {{                                                               \\
                for(std::size_t n = 0; n < _shape[1]; ++n)                  \\
                {{                                                           \\
                    out._array->emplace_back({op}(*_array)[_offset + idx]);    \\
                }}                                                           \\
            }}                                                               \\
        }}

        if(_strides.empty()) loop( m * _shape[1] + n )
        else                 loop( m * _strides[0] + n * _strides[1] )

        #undef loop

        return out;
    }}

    M_THROW_RT_ERROR("unhandled case"); // LCOV_EXCL_LINE

    return out; // LCOV_EXCL_LINE
}}

'''

gen_ops = (
#~    ('+', 'R'),
    ('-', 'R'),
    ('~', 'R'),
    ('!', 'bool'),
)

for op, return_type in gen_ops:

    code = template.format(op = op, return_type = return_type)

    cog.out(code)


]]] */
// [[[end]]]
